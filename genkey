#!/usr/bin/env bash
# (c) 2012 s@ctrlc.hu
#
#  This is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
# invoke with ./genkey mynick 8192 5
#
# params: <nick> <keybits> <passwords> [<working directory>]
#
# generates
# - three passphrases (for the master and the 2 subkeys)
# - an RSA 8192 signing master key,
# - one encryting and one signing subkey
# - an encrypted revocation cert for the masterkey
# - the key for the revocation cert in 5 ssss shares
# - an encrypted copy of the masterkey for backup
# - the key for the backup in 5 ssss shares
#
# depends: gnupg, openssl, ssss, gpgsplit, srm

gpg_opts=''
source ${0%/*}/keytemplate

wd="${1:-$(mktemp -d --tmpdir=/run/shm)}"

function createkey {
    pubring="$wd/pubring.gpg"
    secring="$wd/secring.gpg"
    subkeys="$wd/subkeys.gpg"
    masterring="$wd/masterkey.gpg"
    cryptring="$wd/cryptkey.gpg"
    signring="$wd/signkey.gpg"
    backupring="$wd/backup.gpg"
    finalkey="$wd/finalkey.gpg"
    revokecert="$wd/revoke.gpg"
    revokes="$wd/revoke.shares"
    backups="$wd/backup.shares"

    echo "### Generating master key"
    read master
    set -x
    gpg $gpg_opts --gen-key --batch <(
        cat <<EOF
Key-Type: $KeyType
Key-Length: $masterkeysize
Key-Usage: sign
EOF
        [[ -n "$username" ]] && echo "Name-Real: $username"
        [[ -n "$usercmt" ]] && echo "Name-Comment: $usercmt"
        [[ -n "$email" ]] && echo "Name-Email: $email"
        cat <<EOF
Expire-Date: $masterexpire
%secring $secring
%pubring $pubring
%commit
EOF
)

    keyid="$(gpg $gpg_opts --batch --yes \
             --no-default-keyring \
             --secret-keyring $secring \
             --keyring $pubring \
             --list-keys \
             --with-colons | sed -n '2p' | cut -d: -f5)"

    revokekey="$(openssl rand -hex 128)"
    # store password for revoke cert in ssss shares
    echo -n "$revokekey" | ssss-split -t $revcertsharesneeded -n $revcertshares -x -Q > $revokes
    # generate revokation cert for masterkey
    echo "y
1
Revocation cert automatically generated at key generation time.

y
"    | gpg $gpg_opts \
           --command-fd 0 \
           --no-default-keyring \
           --secret-keyring $secring \
           --keyring $pubring \
           --gen-revoke $keyid |
       gpg $gpg_opts -c --batch --passphrase-file <(echo "$revokekey") > $revokecert

    set +x
    echo "### Creating a signing and encryption subkey"
    set -x

    echo \
"addkey
6
$cryptkeysize
$cryptexpire
addkey
4
$signkeysize
$signexpire
save
" | gpg $gpg_opts \
        --batch --yes \
        --no-default-keyring \
        --secret-keyring $secring \
        --keyring $pubring \
        --command-fd 0 \
        --edit-key $keyid

    set +x
    echo "### Setting master passphrase"
    set -x
    mv $secring $masterring
    gpg $gpg_opts \
        --batch --yes \
        --no-default-keyring \
        --secret-keyring $masterring \
        --keyring $pubring \
        --command-fd 0 \
        --passphrase-file <(echo "$master") \
        --passwd $keyid

    set +x
    echo "### Exporting subkeys"
    set -x
    gpg $gpg_opts \
        --batch --yes \
        --no-default-keyring \
        --secret-keyring $masterring \
        --keyring $pubring \
        --passphrase-file <(echo "$master") \
        --export-options export-reset-subkey-passwd \
        --export-secret-subkeys $keyid \
        > $subkeys

    set +x
    echo "### Importing subkeys into master-key-less new keyring"
    set -x
    gpg $gpg_opts \
        --batch --yes \
        --no-default-keyring \
        --secret-keyring $secring \
        --keyring $pubring \
        --import $subkeys

    set +x
    echo "### Setting encryption password"
    set -x
    read pass1
    cp $secring $cryptring

    gpg $gpg_opts \
        --batch --yes \
        --no-default-keyring \
        --secret-keyring $cryptring \
        --keyring $pubring \
        --command-fd 0 \
        --passphrase-file <(echo "$pass1") \
        --passwd $keyid

    gpgsplit -p "$wd/pass1" $cryptring

    set +x
    echo "### Setting signing password"
    set -x
    read pass2
    cp $secring $signring

    gpg $gpg_opts \
        --batch --yes \
        --no-default-keyring \
        --secret-keyring $signring \
        --keyring $pubring \
        --command-fd 0 \
        --passphrase-file <(echo "$pass2") \
        --passwd $keyid

    gpgsplit -p "$wd/pass2" $signring

    cat "$wd/pass1000001-005.secret_key"    \
        "$wd/pass1000002-013.user_id"       \
        "$wd/pass1000003-002.sig"           \
        "$wd/pass1000004-012.ring_trust"    \
        "$wd/pass1000005-007.secret_subkey" \
        "$wd/pass1000006-002.sig"           \
        "$wd/pass1000007-012.ring_trust"    \
        "$wd/pass2000008-007.secret_subkey" \
        "$wd/pass2000009-002.sig"           \
        "$wd/pass2000010-012.ring_trust"    \
        > $finalkey
    set +x

    # srm only necessary if not working into tmpfs like volatile storage
    if which srm >/dev/null; then rm='srm -f';
    elif which shred >/dev/null; then rm='shred -fu';
    else rm='rm -f'; fi
    set -x
    $rm $wd/pass* $pubring~ $subkeys $secring $cryptring $signring

    set +x
    echo "### Generating a backup of the master key"
    set -x
    backupkey="$(openssl rand -hex 128)"
    # store password for revoke cert in ssss shares
    echo -n "$backupkey" | ssss-split -t $backupsharesneeded -n $backupshares -x -Q > $backups
    gpg $gpg_opts -c --batch --passphrase-file <(echo "$backupkey") -o $backupring $masterring
    set +x

    echo -- "------------------ keygen done ---------------------------"
    echo "Store your masterkey in a secure offline location"
    echo "  $masterring"
    echo "Import your"
    echo "  public key: $pubring"
    echo "  subkeys: $finalkey"
    echo ""
    echo "Store the backup of your masterkey in"
    echo "a secure offline location different from the masterkey"
    echo "  $backupring"
    echo "Store your revocation cert in a secure offline location"
    echo "  $revokecert"
    echo "Distribute your revocation cert shares"
    echo "  $revokes"
    echo "Store your backup shares in various secure locations"
    echo "  $backups"
    echo ""
    echo "Learn your"
    echo " - master password:"
    echo "     $master"
    echo " - encryption password:"
    echo "     $pass1"
    echo " - signing password:"
    echo "     $pass2"
}

# start some entropy generation
#find / >/dev/null 2>&1 &
#trap "kill $!" 0 1 2 3 15

# create work directory if not existing
[[ ! -e "$wd" ]] && {
    mkdir "$wd" || {
        echo "Oops, can't create workdir. Bailing out."
        exit 1
    }
}
[[ "$(stat -f -c %T $wd)" != "tmpfs" ]] &&
    echo -e "Warning temporary keys should be stored in memory only\nFS of $wd is: $(stat -f -c %T "$wd")\n"

# gen key
{ [[ -z "$masterpass" ]] &&
    ${0%/*}/genphrase.py $masterphraselen ||
    echo "$masterpass"
  [[ -z "$cryptpass" ]] &&
    ${0%/*}/genphrase.py $cryptphraselen ||
    echo "$cryptpass"
  [[ -z "$signpass" ]] &&
     ${0%/*}/genphrase.py $signphraselen ||
    echo "$signpass"
} | createkey "$userid"
